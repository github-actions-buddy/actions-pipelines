name: Pipeline PR Body

# Workflow run name
run-name: Workflow run PR No - ${{ github.event.pull_request.number }} and PR title - ${{ github.event.pull_request.title }} by @${{ github.actor }}

# Workflow triggers
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop
    paths-ignore:
      - "**/README.md"
#Jobs
jobs:
  pr_body:
    runs-on: ubuntu-latest
    environment: DEV-CI
    # Only executes next steps if Source branch name starts with feature or defect
    if: ((github.event_name == 'pull_request'))
    env:
      GH_TOKEN: ${{ secrets.V_METADATA_SEC }}
    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: GH CLI
        run: |
          echo "GH CLI Version:"
          gh --version

      - name: GH Create PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "This is a new thread." --repo ${{ github.repository }}

      - name: Find the last comment
        run: |
          LAST_COMMENT_ID=$(gh pr comment list --repo ${{ github.repository }} --json id | jq '.[-1].id')
          echo "LAST_COMMENT_ID=${LAST_COMMENT_ID}" >> $GITHUB_ENV

      - name: Update a new comment after the last comment
        run: |
          # LAST_COMMENT_BODY=$(gh pr comment view ${{ github.event.pull_request.number }} ${{env.LAST_COMMENT_ID}} --repo ${{ github.repository }} | jq -r .body)
          # NEW_BODY="${LAST_COMMENT_BODY}\nSecond Comment"
          gh pr comment ${{ github.event.pull_request.number }} --body "${{env.LAST_COMMENT_ID}}\nSecond Comment" --repo ${{ github.repository }}

      - name: Load env vars using Python
        run: |
          python3 ./AddEnv.py
          echo "Success"
      # Load specific Variables to this Enviroment
      #- name: SFDX Load Dynamic Vars
      #  id: sfdxDynoVar
      #  continue-on-error: true
      #  shell: bash
      #  run: |
      #    source .env.devci

      - name: print env variables
        shell: bash
        run: |
          git fetch --all
          git diff --name-only origin/${{github.head_ref}} origin/${{github.base_ref}}

      - name: print env variables
        shell: bash
        run: |
          echo "Variable 1: ${{env.SF_User}}"
          echo "Variable 2: ${{env.SF_User2}}"
          cat .env.devci

      - name: Test cmd
        run: |
          echo "Hello"
          # sudo -s
          # sed -i '/^declare -x OLDPWD/d' ./.env.devci
          # set -a
          # eval $(dotenv -f ./.env.devci)
          # export >> $GITHUB_ENV
          # set +a
          # echo "source ORGS/.env.DEV-CI" >> "$GITHUB_ENV"

      # - name: Load .env file
      #   uses: xom9ikk/dotenv@v2
      #   with:
      #     path: ./ORGS/
      #     mode: DEV-CI

      # # Find unit tests defined in the PR Body version 2
      # - name: Find Unit Tests In Pull Request Body v2
      #   id: regex-match
      #   run: |
      #     echo '${{github.event.pull_request.body}}' > pullRequestBody.txt
      #     python3 ./readPRBody.py -s pullRequestBody.txt
      # # Print ENV PR_TESTS
      # - name: Echo PR_TESTS
      #   run: echo ${{env.PR_TESTS}}
