name: Pipeline CI

# Workflow run name
run-name: Workflow run No - {{ github.run_number }} by @${{ github.actor }}

# Workflow triggers
on:
  workflow_dispatch:
    inputs:
      sourceBranch:
        description: "Source Branch"
        required: true
        type: string
      targetBranch:
        description: "Target Branch"
        required: true
        type: string
      targetEnv:
        description: 'Target Environment for Deployment'
        default: 'None'
        type: choice
        required: true
        options:
        - None
        - CI
        - SIT
        - UAT
        - PRODUCTION
      
  # Pull request trigger
  # pull_request:
  #   types: [opened, synchronize]
  #   branches:
  #     - develop
  #     - integration
  #     - release
  #     - "integration/**"
  #     - "release/**"
  #   paths-ignore:
  #     - "**/README.md"

# Environment Variables
env:
  # REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }}
  GIT_USER_NAME: github
  GIT_USER_EMAIL: githubactions@altice.com
  PR_NUMBER: ${{ github.event.number }}
  TARGET_ENVIRONMNET: ${{ inputs.targetEnv }}

jobs:
  test_job:
    runs-on: ubuntu-latest
    # Only executes next steps if Source branch name starts with develop
    if: (startswith(${{inputs.sourceBranch}},'feature') || (github.event_name == 'workflow_dispatch' && contains(github.ref, 'feature/')))
    env:
      TARGET_ENVIRONMNET: ${{inputs.targetEnv}}
    steps:
      # Checkout the current repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup python v3.7
      - uses: actions/setup-python@v4
        name: Install Python v3.7 and cache pip
        with:
          python-version: "3.7"

      # Checking out repo before installing Node
      - uses: actions/checkout@v3
        name: Checkout Repository

      # Setup Node v14
      - uses: actions/setup-node@v3
        name: Install Node v18
        with:
          node-version: "18"

      # check env and branch
      - name: Check branch and env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "CI" ] && [ "${{ github.ref }}" != "refs/heads/develop" ]; then
            echo "Error: CI environment can only be used with develop"
            exit 1
          elif [ "${{ github.event.inputs.environment }}" == "SIT" ] && [ "${{ github.ref }}" != "refs/heads/int" ]; then
            echo "Error: SIT environment can only be used with int branch"
            exit 1
          elif [ "${{ github.event.inputs.environment }}" == "UAT" ] && [ "${{ github.ref }}" != "refs/heads/releases" ]; then
            echo "Error: UAT environment can only be used with releases branch"
            exit 1
          elif [ "${{ github.event.inputs.environment }}" == "PROD" ] && [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "Error: PROD environment can only be used with main branch"
            exit 1
          fi

      # check env
      - name: Enviornment CHECK
        run: |
          # You can use different secrets from each environment and handle exceptions like this:
          if [ "${{ github.event.inputs.environment }}" == "CI" ]; then
            echo "Using secrets from CI environment: ${{ secrets.HELLO }}, ${{ secrets.TEST_SECRET }}"
          elif [ "${{ github.event.inputs.environment }}" == "SIT" ]; then
            echo "Using secrets from SIT environment: ${{ secrets.HELLO2SIT }}, ${{ secrets.SIT }}"
          elif [ "${{ github.event.inputs.environment }}" == "UAT" ]; then
            echo "Using secrets from UAT environment: ${{ secrets.HELLO2UAT }}, ${{ secrets.UAT }}"
          elif [ "${{ github.event.inputs.environment }}" == "PROD" ]; then
            echo "Using secrets from PROD environment: ${{ secrets.HELLO2PROD }}, ${{ secrets.PROD }}"
          else
            echo "Error: Invalid environment selected"
            exit 1
          fi
