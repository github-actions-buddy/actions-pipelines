name: Pipeline CI

# Workflow run name
run-name: Workflow run No - ${{ github.run_number }} by @${{ github.actor }}

# Workflow triggers
on:
  workflow_dispatch:
    inputs:
      sourceBranch:
        description: "Source Branch"
        required: true
        type: string
      targetBranch:
        description: "Target Branch"
        required: true
        type: string
      checkFLG:
        description: "Check Branch"
        required: true
        default: false
        type: boolean
      pullRequestNumber:
        description: "Enter Pull Request Number"
        required: true
        type: number
      targetEnv:
        description: "Target Environment for Deployment"
        default: "None"
        type: choice
        required: true
        options:
        - None
        - CI
        - SIT
        - UAT
        - PRODUCTION
      
  # Pull request trigger
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop
      - integration
      - release
      - "integration/**"
      - "release/**"
    paths-ignore:
      - "**/README.md"

# Environment Variables
env:
  GIT_USER_NAME: github
  GIT_USER_EMAIL: githubactions@gmail.com
  PR_NUMBER: ${{ github.event.number }}
  TARGET_ENVIRONMNET: ${{ inputs.targetEnv }}

jobs:
  test_job:
    runs-on: ubuntu-latest
    # Only executes next steps if Source branch name starts with develop
    if: (startswith(${{inputs.sourceBranch}},'feature') || ((github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request') && contains(github.ref, 'feature/')))
    env:
      TARGET_ENVIRONMNET: ${{inputs.targetEnv}}
      CHECK_FLG: ${{inputs.checkFLG}}
      SOURCE_BRANCH: ${{inputs.sourceBranch}}
      TARGET_BRANCH: ${{inputs.targetBranch}}
      PR_NUMBER: ${{inputs.pullRequestNumber}}
    steps:
      # Checkout the current repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup python v3.7
      - uses: actions/setup-python@v4
        name: Install Python v3.7 and cache pip
        with:
          python-version: "3.7"

      # Checking out repo before installing Node
      - uses: actions/checkout@v3
        name: Checkout Repository
      
      # Create a PR comment thread
      - name: Create PR comment Thread
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{env.PR_NUMBER}}
          body: |
            ## **Starting build #[${{github.run_number}}][1]**
            ------
            [1]: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Find comments in PR
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: lastComment
        with:
          issue-number: ${{ env.PR_NUMBER }}
          comment-author: "github-actions[bot]"
          direction: last

      # Setup Node v14
      - uses: actions/setup-node@v3
        name: Install Node v18
        with:
          node-version: "18"
      
      # Install Git
      - name: Install Git
        run: |
          sudo apt update
          sudo apt-get install -y git
          git --version

      # Update a comment in PR Thread
      - name: Update Comment Thread - Delta Package-Not Built
        if: (github.event_name == 'workflow_dispatch')
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.lastComment.outputs.comment-id }}
          issue-number: ${{env.PR_NUMBER }}
          body: |
            + Installation Success :white_check_mark:

      # Configure a global user for Git
      - name: Configure Global User for Git
        run: |
          git config --global user.email ${{ env.GIT_USER_NAME }}
          git config --global user.name ${{ env.GIT_USER_EMAIL }}
          git config --global diff.renameLimit 5000
          git config core.quotepath off
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
      
      # Update a comment in PR Thread
      - name: Update Comment Thread - Delta Package-Not Built
        if: (github.event_name == 'workflow_dispatch')
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.lastComment.outputs.comment-id }}
          issue-number: ${{env.PR_NUMBER }}
          body: |
            + Git Config Complete :white_check_mark:
          
      # echo
      - name: Echo
        run: |
          echo "Head Ref: ${{github.head_ref}}"
          echo "Base Ref: ${{github.base_ref}}"

      # check flg
      - name: Check FLG
        if: env.CHECK_FLG == 'true'
        run: |
          echo "FLAG IS ON"
      # check flg
      - name: Check FLG
        if: env.CHECK_FLG == 'false'
        run: |
          echo "FLAG IS OFF"

      #git
      - name: Git Check
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git checkout ${{ env.TARGET_BRANCH }}
          git checkout ${{ env.SOURCE_BRANCH }}

      # Update a comment in PR Thread
      - name: Update Comment Thread - Delta Package-Not Built
        if: (github.event_name == 'workflow_dispatch')
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.lastComment.outputs.comment-id }}
          issue-number: ${{env.PR_NUMBER }}
          body: |
            + Git Check Complete :white_check_mark:

      # check env and branch
      - name: Check branch and env
        run: |
          if [ "${{ env.TARGET_ENVIRONMNET }}" == "CI" ] && [ "${{ inputs.targetBranch }}" != "develop" ]; then
            echo "Error: CI environment can only be used with develop"
            exit 1
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "SIT" ] && [ "${{ inputs.targetBranch }}" != "int" ]; then
            echo "Error: SIT environment can only be used with int branch"
            exit 1
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "UAT" ] && [ "${{ inputs.targetBranch }}" != "releases" ]; then
            echo "Error: UAT environment can only be used with releases branch"
            exit 1
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "PROD" ] && [ "${{ inputs.targetBranch }}" != "main" ]; then
            echo "Error: PROD environment can only be used with main branch"
            exit 1
          fi

      # check env
      - name: Enviornment CHECK
        run: |
          # You can use different secrets from each environment and handle exceptions like this:
          if [ "${{ env.TARGET_ENVIRONMNET }}" == "CI" ]; then
            echo "Using secrets from CI environment: ${{ secrets.HELLO }}, ${{ secrets.TEST_SECRET }}"
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "SIT" ]; then
            echo "Using secrets from SIT environment: ${{ secrets.HELLO2SIT }}, ${{ secrets.SIT }}"
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "UAT" ]; then
            echo "Using secrets from UAT environment: ${{ secrets.HELLO2UAT }}, ${{ secrets.UAT }}"
          elif [ "${{ env.TARGET_ENVIRONMNET }}" == "PROD" ]; then
            echo "Using secrets from PROD environment: ${{ secrets.HELLO2PROD }}, ${{ secrets.PROD }}"
          else
            echo "Error: Invalid environment selected"
            exit 1
          fi
