import json
import sys
import html

def generate_html_from_json(input_file):
    try:
        with open(input_file, 'r') as f:
            data_json = json.load(f)
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
        return
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in '{input_file}'.")
        return
    except Exception as e:
        print(f"An error occurred: {e}")
        return

    html_content = f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>SF Validation Report</title>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    </head>
    <body>
        <div class="container">
            <h1>Heading of report - SF Validation</h1>
            <h2>Status - {'Failed' if data_json['status'] == 1 else 'Success'}</h2>
            <h3>Component Success</h3>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>File Name</th>
                    </tr>
                </thead>
                <tbody>
    '''

    for item in data_json['componentSuccesses']:
        html_content += f"                    <tr><td>{html.escape(item['fileName'])}</td></tr>\n"

    html_content += f'''
                </tbody>
            </table>
            <h3>Apex Test Results</h3>
            <p>Lines not covered: {', '.join(map(str, data_json['runTestResult']['codeCoverage']['locationsNotCovered']))}</p>
            <p>Total number of lines: {data_json['runTestResult']['codeCoverage']['numLocations']}</p>
            <p>Number of lines not covered: {data_json['runTestResult']['codeCoverage']['numLocationsNotCovered']}</p>
            <h3>Code Coverage Warnings</h3>
            <p>{html.escape(data_json['runTestResult']['codeCoverageWarnings'][0]['message'])} - {html.escape(data_json['runTestResult']['codeCoverageWarnings'][0]['name'])}</p>
        </div>
    </body>
    </html>
    '''

    with open('sf_validation_report.html', 'w') as file:
        file.write(html_content)

    print("HTML report generated successfully.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script_name.py input_file.json")
    else:
        generate_html_from_json(sys.argv[1])

v2
import json

def generate_html_report(json_file):
    with open(json_file) as f:
        data = json.load(f)

    status = "Failed" if data["status"] == 1 else "Success"

    components = [component["fileName"] for component in data["details"]["componentSuccesses"]]

    lines_not_covered = ', '.join(map(str, data["runTestResult"]["codeCoverage"]["locationsNotCovered"]))
    total_lines = data["runTestResult"]["codeCoverage"]["numLocations"]
    lines_not_covered_count = data["runTestResult"]["codeCoverage"]["numLocationsNotCovered"]
    coverage_warnings_message = data["runTestResult"]["codeCoverageWarnings"]["message"]
    coverage_warnings_name = data["runTestResult"]["codeCoverageWarnings"]["name"]

    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>SF Validation Report</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    </head>
    <body>
        <div class="container mt-4">
            <h2>Heading of report - SF Validation</h2>
            <h4>Status - {status}</h4>
            <h4>Component Success</h4>
            <ul>
    """

    for component in components:
        html_content += f"<li>{component}</li>\n"

    html_content += f"""
            </ul>
            <h4>Apex Test Results</h4>
            <p>Numbers of lines not covered - {lines_not_covered}</p>
            <p>Total number of lines - {total_lines}</p>
            <p>Number of lines not covered - {lines_not_covered_count}</p>
            <h4>Code Coverage Warnings</h4>
            <p>{coverage_warnings_message}</p>
            <p>{coverage_warnings_name}</p>
        </div>
    </body>
    </html>
    """

    with open('SF_Validation_Report.html', 'w') as file:
        file.write(html_content)

if __name__ == '__main__':
    try:
        file_name = input("Enter the JSON file name: ")
        generate_html_report(file_name)
        print("HTML report has been generated successfully.")
    except FileNotFoundError:
        print("File not found. Please provide a valid file name.")
    except IOError:
        print("An error occurred while handling the file.")
    except json.JSONDecodeError:
        print("Invalid JSON file format. Please provide a valid JSON file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

v3
import json
import argparse

def generate_html_report(json_file):
    with open(json_file) as f:
        data = json.load(f)

    status = "Failed" if data["status"] == 1 else "Success"

    components = [component["fileName"] for component in data["details"]["componentSuccesses"]]

    lines_not_covered = ', '.join(map(str, data["runTestResult"]["codeCoverage"]["locationsNotCovered"]["line"]))
    total_lines = data["runTestResult"]["codeCoverage"]["numLocations"]
    lines_not_covered_count = data["runTestResult"]["codeCoverage"]["numLocationsNotCovered"]
    coverage_warnings_message = data["runTestResult"]["codeCoverageWarnings"]["message"]
    coverage_warnings_name = data["runTestResult"]["codeCoverageWarnings"]["name"]

    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>SF Validation Report</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    </head>
    <body>
        <div class="container mt-4">
            <h2>Heading of report - SF Validation</h2>
            <h4>Status - {status}</h4>
            <h4>Component Success</h4>
            <ul>
    """

    for component in components:
        html_content += f"<li>{component}</li>\n"

    html_content += f"""
            </ul>
            <h4>Apex Test Results</h4>
            <p>Numbers of lines not covered - {lines_not_covered}</p>
            <p>Total number of lines - {total_lines}</p>
            <p>Number of lines not covered - {lines_not_covered_count}</p>
            <h4>Code Coverage Warnings</h4>
            <p>{coverage_warnings_message}</p>
            <p>{coverage_warnings_name}</p>
        </div>
    </body>
    </html>
    """

    with open('SF_Validation_Report.html', 'w') as file:
        file.write(html_content)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate an HTML report based on a JSON file.')
    parser.add_argument('-f', '--file', help='JSON file name', required=True)
    args = parser.parse_args()

    try:
        generate_html_report(args.file)
        print("HTML report has been generated successfully.")
    except FileNotFoundError:
        print("File not found. Please provide a valid file name.")
    except IOError:
        print("An error occurred while handling the file.")
    except json.JSONDecodeError:
        print("Invalid JSON file format. Please provide a valid JSON file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
